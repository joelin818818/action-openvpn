name: 在最新Ubuntu上运行脚本并循环检查网络 (通过OpenVPN) # 工作流名称

on:
  workflow_dispatch: # 手动触发此工作流运行

jobs:
  run-on-ubuntu: # 作业名称
    runs-on: ubuntu-latest # 在最新的Ubuntu环境上运行
    timeout-minutes: 60 # 设置作业超时时间，防止长时间运行

    steps:
      # Step 1: 检出代码
      - name: 检出代码 # 步骤名称
        uses: actions/checkout@v4 # 使用actions/checkout@v4来检出代码仓库

      # --- Step 2: 下载 quick_start.sh 脚本 ---
      # 此步骤将在上一步成功后自动运行
      - name: 下载 quick_start.sh 脚本 (安装程序)
        id: download-script
        run: |
          #!/bin/bash
          set -eux

          echo "--- [阶段 1/3] 下载 quick_start.sh 脚本 (用于安装 1Panel) ---"

          echo "[Download Task] 下载 quick_start.sh 脚本并执行..."
          curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh && sudo bash quick_start.sh

          echo "[Download Task] ✓ quick_start.sh 下载并执行完毕。"
        shell: bash

      # --- Step 3: 启动 OpenVPN 守护进程并验证出口IP国家 ---
      # OpenVPN 进程在此步骤启动并保持运行，并通过验证出口IP来确认连接成功
      - name: 启动OpenVPN守护进程
        id: start-vpn
        run: |
          #!/bin/bash
          set -eu

          # OpenVPN 守护进程的 PID 文件路径
          PID_FILE="/tmp/openvpn_daemon.pid"

          echo "--- [阶段 2/3] 启动 OpenVPN 守护进程 ---"

          echo "[VPN Setup] 安装 OpenVPN 软件包..."
          if ! dpkg -s openvpn > /dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y openvpn
          else
            echo "[VPN Setup] OpenVPN 软件包已安装."
          fi

          OPENVPN_CONFIG_CONTENT="${{ secrets.OPENVPN_CONFIG }}" # 从 Secrets 获取 VPN 配置
          CONFIG_DIR="/etc/openvpn/client"
          CONFIG_FILE="${CONFIG_DIR}/client.conf"

          echo "[VPN Setup] 创建配置目录: ${CONFIG_DIR}"
          sudo mkdir -p "${CONFIG_DIR}"
          sudo chmod 700 "${CONFIG_DIR}" # 设置目录权限

          echo "[VPN Setup] 创建 OpenVPN 配置文件: ${CONFIG_FILE}"
          echo "${OPENVPN_CONFIG_CONTENT}" | sudo sh -c "cat > ${CONFIG_FILE}"
          sudo chmod 600 "${CONFIG_FILE}" # 设置文件权限

          echo "[VPN Setup] 使用 nohup 启动 OpenVPN 守护进程 (PID 到 ${PID_FILE})..."
          # 使用 nohup 和 & 让 OpenVPN 在后台运行，并尝试使其在此步骤结束后继续存在
          # --writepid 将守护进程的 PID 写入文件
          # --verb 3 控制 OpenVPN 自身的日志级别
          # >/dev/null 2>&1 重定向 OpenVPN 日志到空，减少 Actions 日志量
          nohup sudo openvpn --config "${CONFIG_FILE}" --writepid "${PID_FILE}" --verb 3 >/dev/null 2>&1 &
          # $! 是 nohup 命令的 PID，不是 OpenVPN 守护进程的 PID

          echo "[VPN Setup] 等待 OpenVPN 守护进程 PID 文件出现并确认进程运行 (最多 20 秒)..."
          WAIT_PID_TIMEOUT=20 # 等待 PID 文件和进程出现的时间
          END_WAIT_PID=$((SECONDS + WAIT_PID_TIMEOUT))
          daemon_pid=""

          # 循环等待 PID 文件和进程
          while [ $SECONDS -lt $END_WAIT_PID ]; do
              if [ -f "${PID_FILE}" ] && [ -s "${PID_FILE}" ]; then # 检查文件是否存在且非空
                   daemon_pid=$(cat "${PID_FILE}")
                   if ps -p "$daemon_pid" > /dev/null 2>&1; then # 检查 PID 是否对应一个运行的进程
                       echo "[VPN Setup] OpenVPN 守护进程已启动，PID: $daemon_pid."
                       break # 找到 PID 且进程运行，跳出循环
                   fi
              fi
              sleep 1 # 每秒检查一次
          done

          # 检查最终是否确认守护进程运行。如果守护进程都没起来，直接失败。
          if [ -z "$daemon_pid" ] || ! ps -p "$daemon_pid" > /dev/null 2>&1; then # Check if daemon_pid is empty OR process not running
              echo "[VPN Setup] ✗ OpenVPN 守护进程未能在 ${WAIT_PID_TIMEOUT} 秒内确认运行。启动失败。"
              exit 1 # 步骤失败
          fi

          echo "[VPN Setup] ✓ OpenVPN 守护进程确认运行。"
          echo "daemon_pid=${daemon_pid}" >> $GITHUB_OUTPUT
        shell: bash # 使用 bash 执行脚本

      - name: 获取VPN IP并更新1Panel访问信息
        run: |
          #!/bin/bash
          set -e
          
          echo "--- [获取VPN IP并更新1Panel访问信息] ---"
          
          # 等待VPN连接稳定（等待5秒）
          echo "[VPN Info] 等待VPN连接稳定..."
          sleep 5
          
          # 获取OpenVPN分配的IP地址
          # 通常OpenVPN会创建tun0接口，但名称可能不同，所以检查所有tun接口
          VPN_IP=$(ip addr show | grep -E 'tun[0-9]+' -A2 | grep 'inet ' | head -n1 | awk '{print $2}' | cut -d'/' -f1)
          
          if [ -z "$VPN_IP" ]; then
            echo "[VPN Info] 警告: 无法获取OpenVPN的IP地址，尝试获取其他网络接口..."
            # 尝试获取所有其他非本地接口的IP
            VPN_IP=$(ip addr show | grep -v '127.0.0.1' | grep 'inet ' | head -n1 | awk '{print $2}' | cut -d'/' -f1)
          fi
          
          if [ -z "$VPN_IP" ]; then
            echo "[VPN Info] 警告: 仍然无法获取有效IP地址，将使用默认值 127.0.0.1"
            VPN_IP="127.0.0.1"
          fi
          
          echo "[VPN Info] 获取到的VPN IP地址: $VPN_IP"
          
          # 从运行日志中提取1Panel信息
          # 通常我们会从安装日志中提取，但这里我们假设日志包含以下信息
          PANEL_PORT=$(grep -E "External address: http://[0-9.]+" $GITHUB_STEP_SUMMARY 2>/dev/null | grep -Eo ':[0-9]+/' | tr -d ':/' || echo "36078")
          PANEL_PATH=$(grep -E "External address: http://[0-9.]+" $GITHUB_STEP_SUMMARY 2>/dev/null | grep -Eo '/[a-z0-9]+' | head -n1 || echo "/c8dd635007")
          PANEL_USER=$(grep -E "Panel user: [a-z0-9]+" $GITHUB_STEP_SUMMARY 2>/dev/null | grep -Eo '[a-z0-9]+$' || echo "dea9f00344")
          PANEL_PASSWORD=$(grep -E "Panel password: [a-z0-9]+" $GITHUB_STEP_SUMMARY 2>/dev/null | grep -Eo '[a-z0-9]+$' || echo "9a2f01ab15")
          
          # 如果无法从日志获取信息，使用固定值
          if [ "$PANEL_PORT" == "36078" ] && [ "$PANEL_PATH" == "/c8dd635007" ]; then
            echo "[VPN Info] 无法从日志提取1Panel信息，使用默认值"
          fi
          
          # 构建并输出新的1Panel访问信息
          echo ""
          echo "=========== 1Panel 访问信息 (通过 VPN) ==========="
          echo "访问地址: http://${VPN_IP}${PANEL_PORT}${PANEL_PATH}"
          echo "用户名: ${PANEL_USER}"
          echo "密码: ${PANEL_PASSWORD}"
          echo "================================================="
          echo ""
          
          # 保存到GitHub Actions输出摘要
          echo "### 1Panel 访问信息 (通过 VPN)" >> $GITHUB_STEP_SUMMARY
          echo "访问地址: http://${VPN_IP}${PANEL_PORT}${PANEL_PATH}" >> $GITHUB_STEP_SUMMARY
          echo "用户名: ${PANEL_USER}" >> $GITHUB_STEP_SUMMARY
          echo "密码: ${PANEL_PASSWORD}" >> $GITHUB_STEP_SUMMARY
        shell: bash

      - name: 等待OpenVPN守护进程结束
        run: |
          #!/bin/bash
          set -e

          # OpenVPN 守护进程的 PID 文件路径
          OPENVPN_DAEMON_PID_FILE="/tmp/openvpn_daemon.pid"
          
          echo "--- [阶段 3/3] 等待 OpenVPN 守护进程结束 ---"
          
          # 检查 PID 文件是否存在
          if [ ! -f "${OPENVPN_DAEMON_PID_FILE}" ]; then
            echo "[Wait] OpenVPN 守护进程 PID 文件不存在。"
            exit 0
          fi
          
          # 读取守护进程 PID
          daemon_pid=$(cat ${OPENVPN_DAEMON_PID_FILE} 2>/dev/null)
          if [ -z "$daemon_pid" ]; then
            echo "[Wait] OpenVPN 守护进程 PID 文件为空。"
            exit 0
          fi
          
          # 检查进程是否在运行
          if ! ps -p "$daemon_pid" > /dev/null 2>&1; then
            echo "[Wait] OpenVPN 守护进程 (PID: $daemon_pid) 不在运行。"
            sudo rm -f "${OPENVPN_DAEMON_PID_FILE}" || true
            exit 0
          fi
          
          echo "[Wait] 发现 OpenVPN 守护进程 (PID: $daemon_pid) 正在运行。等待其结束..."
          
          # 等待进程结束或手动终止
          # 无限等待进程结束，不设置超时时间
          counter=0
          while ps -p "$daemon_pid" > /dev/null 2>&1; do
            # 每60秒输出一次状态
            if [ $((counter % 60)) -eq 0 ]; then
              echo "[Wait] OpenVPN 守护进程仍在运行，已等待 $counter 秒..."
            fi
            sleep 1
            counter=$((counter + 1))
          done
          
          echo "[Wait] OpenVPN 守护进程已结束。"
          sudo rm -f "${OPENVPN_DAEMON_PID_FILE}" || true
          exit 0
        shell: bash
